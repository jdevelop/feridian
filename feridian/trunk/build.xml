<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="jar" name="muse">

    <!-- =================================================================== -->
    <!-- Variable Initialization                                             -->
    <!-- =================================================================== -->
    <property name="Name" value="Echomine Muse"/>
    <property name="project" value="muse"/>
    <property name="version" value="0.81"/>
    <property name="year" value="2001-2005"/>

    <property name="project.home" value="."/>

    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>

    <patternset id="common-files">
        <include name="com/echomine/common/**"/>
        <include name="com/echomine/util/**"/>
        <include name="com/echomine/net/**"/>
    </patternset>

    <path id="compile.classpath">
        <fileset dir="${src.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Prints useful build environment values                             -->
    <!-- ================================================================== -->
    <target name="env">
        <echo message="project.home = ${project.home}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="java.version = ${java.version}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="os.name = ${os.name}"/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
    </target>

    <!-- Create directories, copy static files -->
    <target name="prepare" depends="env">
        <mkdir dir="${work.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dest}"/>
        <mkdir dir="${build.src}"/>
        <copy todir="${build.src}">
            <fileset dir="${src.java.dir}">
                <include name="**/**"/>
            </fileset>
        </copy>

        <!-- example files -->
        <mkdir dir="${build.examples.dir}"/>
        <mkdir dir="${build.examples.dir}/src"/>
        <mkdir dir="${build.examples.dir}/classes"/>
        <copy todir="${build.examples.dir}/src">
            <fileset dir="${src.examples.dir}">
                <include name="**/**"/>
            </fileset>
        </copy>
    </target>


    <!-- compile the entire package, but NOT including any logging/debugging -->
    <target name="compile" depends="prepare">
        <javac srcdir="${build.src}" destdir="${build.dest}" debug="${compile.debug}"
            deprecation="${compile.deprecation}" optimize="${compile.optimize}">
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
        </javac>
        <!-- copy any properties files over to the classes directory -->
        <copy todir="${build.dest}">
            <fileset dir="${build.src}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <!-- jars all the compiled files -->
    <target name="jar" depends="compile">
        <jar jarfile="${work.dir}/${jar.name}">
            <fileset dir="${build.dest}"/>
            <manifest>
                <attribute name="Implementation-Title" value="Muse"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="Echomine Inc."/>
            </manifest>
        </jar>
    </target>

    <!-- example file compilation -->
    <target name="compile-examples" depends="compile">
        <javac srcdir="${build.examples.dir}/src" destdir="${build.examples.dir}/classes" debug="${compile.debug}"
            deprecation="${compile.deprecation}" optimize="${compile.optimize}">
            <classpath refid="compile.classpath"/>
            <classpath location="${build.dest}"/>
            <include name="**/*.java"/>
        </javac>
    </target>

    <!-- jar example files -->
    <target name="jar-examples" depends="compile-examples">
        <jar jarfile="${work.dir}/${jar.examples.name}">
            <fileset dir="${build.examples.dir}/classes"/>
            <manifest>
                <attribute name="Implementation-Title" value="Muse Examples"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="Echomine Inc."/>
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="prepare">
        <mkdir dir="${javadoc.dest}"/>
        <javadoc author="true" bottom="Copyright &amp;copy; ${year} Echomine. All Rights Reserved." destdir="${javadoc.dest}"
            doctitle="${Name} ${version} API" packagenames="com.echomine.*" private="false" sourcepath="${build.src}"
            use="true" version="true" windowtitle="${Name} ${version} API">
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Package Preparation (no archiving yet)                              -->
    <!-- =================================================================== -->
    <target name="prepare-package" depends="jar,jar-examples">
        <delete dir="${dist.dir}" verbose="false"/>
        <mkdir dir="${dist.dir}"/>

        <copy todir="${dist.dir}/src">
            <fileset dir="${src.java.dir}"/>
        </copy>
        <copy todir="${dist.dir}/examples">
            <fileset dir="${src.examples.dir}"/>
        </copy>
        <copy todir="${dist.dir}/test">
            <fileset dir="${src.test.dir}"/>
        </copy>
        <copy todir="${dist.dir}/build">
            <fileset dir="${project.home}/build"/>
        </copy>
        <copy todir="${dist.dir}/lib">
            <fileset dir="${src.lib.dir}"/>
            <fileset dir="${work.dir}">
                <include name="${jar.name}"/>
                <include name="${jar.examples.name}"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/license">
            <fileset dir="${src.license.dir}"/>
        </copy>

        <copy todir="${dist.dir}">
            <fileset dir="${project.home}">
                <include name="build*.*"/>
            </fileset>
            <fileset dir="${src.docs.dir}">
                <include name="readme.txt"/>
                <include name="changelog.txt"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with ZIP (with or w/o docs)               -->
    <!-- =================================================================== -->
    <target name="package-zip" depends="prepare-package">
        <delete file="${work.dir}/${dist.zip.name}" verbose="false"/>
        <zip basedir="${dist.dir}" includes="**/**" zipfile="${work.dir}/${dist.zip.name}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with TAR-GZIP (with or w/o docs)          -->
    <!-- =================================================================== -->
    <target name="package-tgz" depends="prepare-package">
        <delete file="${work.dir}/${dist.tar.name}" verbose="false"/>
        <delete file="${work.dir}/${dist.tgz.name}" verbose="false"/>
        <tar basedir="${dist.dir}" includes="**/**" tarfile="${work.dir}/${dist.tar.name}"/>
        <gzip src="${work.dir}/${dist.tar.name}" zipfile="${work.dir}/${dist.tgz.name}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP (with or w/o docs)  -->
    <!-- =================================================================== -->
    <target name="package-all" depends="package-zip, package-tgz">
    </target>

    <!-- run the unit tests -->
    <target name="test.junit" depends="compile" description="Run JUnit tests">
        <ant antfile="build-tests.xml" inheritrefs="yes" target="test.junit"/>
    </target>

    <target name="test.clean">
        <ant antfile="build-tests.xml" target="clean"/>
    </target>

    <!-- Cleans up the build directory  -->
    <target name="clean">
        <delete file="${work.dir}/${dist.zip.name}" verbose="false"/>
        <delete file="${work.dir}/${dist.tar.name}" verbose="false"/>
        <delete file="${work.dir}/${dist.tgz.name}" verbose="false"/>
        <delete file="${work.dir}/${jar.name}" verbose="false"/>
        <delete file="${work.dir}/${jar.examples.name}" verbose="false"/>
        <delete dir="${build.dir}"/>
        <delete dir="${build.examples.dir}"/>
        <delete dir="${work.dir}/docs"/>
        <delete dir="${dist.dir}" verbose="false"/>
    </target>
</project>
