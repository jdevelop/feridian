<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="jar-all" name="muse">

    <!-- =================================================================== -->
    <!-- Variable Initialization                                             -->
    <!-- =================================================================== -->
    <property name="Name" value="Echomine Muse"/>
    <property name="project" value="muse"/>
    <property name="version" value="1.0a1"/>
    <property name="year" value="2001-2005"/>

    <property name="project.home" value="."/>

    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>

    <path id="jibx.classpath">
        <pathelement location="${lib.compile.dir}/bcel.jar"/>
        <pathelement location="${lib.compile.dir}/jibx-bind.jar"/>
        <pathelement location="${lib.compile.dir}/jibx-extras.jar"/>
        <pathelement location="${src.lib.dir}/jibx-run.jar"/>
        <pathelement location="${src.lib.dir}/xpp3.jar"/>
    </path>

    <path id="compile.classpath">
        <fileset dir="${src.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- taskdef for jibx -->
    <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
        <classpath refid="jibx.classpath"/>
    </taskdef>

    <!-- ================================================================== -->
    <!-- Basic preparation                                                  -->
    <!-- ================================================================== -->
    <target name="env">
        <!--
        <echo message="project.home = ${project.home}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="java.version = ${java.version}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="os.name = ${os.name}"/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        -->
    </target>

    <target name="prepare-base" depends="env">
        <mkdir dir="${work.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>
    
    <!-- ================================================================== -->
    <!-- Generic tasks for use by all modules                               -->
    <!-- ================================================================== -->
    
    <!-- generic prepare module task -->
    <target name="prepare-module" depends="prepare-base" if="module.name">
        <echo message="Preparing Module ${module.name}"/>
        <mkdir dir="${build.dir}/${module.name}"/>
        <mkdir dir="${build.dir}/${module.name}/classes"/>
        <mkdir dir="${build.dir}/${module.name}/src"/>
        <!-- copy all source codes over to build dir -->
        <copy todir="${build.dir}/${module.name}/src">
            <fileset dir="${src.java.dir}/${module.name}"/>
        </copy>
    </target>
    
    <!-- compile the module -->
    <target name="compile-module" depends="prepare-module" if="module.name">
        <echo message="Compiling Module ${module.name}"/>
        <javac srcdir="${build.dir}/${module.name}/src"
            destdir="${build.dir}/${module.name}/classes" debug="${compile.debug}"
            deprecation="${compile.deprecation}" optimize="${compile.optimize}">
            <classpath refid="compile.classpath"/>
            <classpath refid="module.classpath"/>
            <include name="**/*.java"/>
        </javac>
    </target>

    <!-- jibx binding modifications to compiled classes -->
    <target name="bind-module" depends="compile-module" if="module.name">
        <echo message="Binding Module ${module.name}"/>
        <bind verbose="false" load="true">
            <bindingfileset dir="${src.bindings.dir}/${module.name}"/>
            <classpathset dir="${build.dir}/${module.name}/classes"/>
        </bind>
    </target>

    <!-- jars all the compiled module files -->
    <target name="jar-module" depends="bind-module" if="module.name">
        <echo message="Jarring Module ${module.name}"/>
        <jar jarfile="${work.dir}/${project}-${module.name}.jar">
            <fileset dir="${build.dir}/${module.name}/classes"/>
            <manifest>
                <attribute name="Implementation-Title" value="${project}-${module.name}"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="Echomine Inc."/>
            </manifest>
        </jar>
    </target>

    <!-- Cleans up the module build directory  -->
    <target name="clean-module" if="module.name">
        <delete file="${work.dir}/${project}-${module.name}.jar" verbose="false"/>
        <delete dir="${build.dir}/${module.name}"/>
    </target>
    
    <!-- ================================================================== -->
    <!-- Generic unit testing tasks for use by all modules                  -->
    <!-- ================================================================== -->

    <!-- prepares test sources -->
    <target name="prepare-test-module" depends="prepare-base" if="module.name">
        <mkdir dir="${build.dir}/${module.name}/tests"/>
        <mkdir dir="${build.dir}/${module.name}/tests/src"/>
        <mkdir dir="${build.dir}/${module.name}/tests/classes"/>
        <!-- copy test source over to build directory -->
        <copy todir="${build.dir}/${module.name}/tests/src">
            <fileset dir="${src.test.dir}/${module.name}"/>
        </copy>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test-module" depends="prepare-test-module" if="module.name">
        <javac srcdir="${build.dir}/${module.name}/tests/src"
            destdir="${build.dir}/${module.name}/tests/classes"
            debug="${compile.debug}" optimize="${compile.optimize}"
            deprecation="${compile.deprecation}">
            <classpath location="${lib.compile.dir}/junit.jar"/>
            <classpath location="${build.dir}/${module.name}/classes"/>
            <classpath refid="module.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="jibx.classpath"/>
        </javac>
        <copy todir="${build.dir}/${module.name}/tests/classes">
            <fileset dir="${build.dir}/${module.name}/tests/src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- run the junit tests for a module -->
    <target name="test-module" depends="compile-test-module" if="module.name">
        <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="yes">
            <!-- JUnit Configuration Options -->
            <classpath location="${build.dir}/${module.name}/classes"/>
            <classpath location="${build.dir}/${module.name}/tests/classes"/>
            <classpath refid="module.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="jibx.classpath"/>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes">
                <fileset dir="${build.dir}/${module.name}/tests/classes">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Cleans up the module build directory  -->
    <target name="clean-test-module" if="module.name">
        <delete dir="${build.dir}/${module.name}/tests"/>
    </target>
    
    <!-- ================================================================== -->
    <!-- xmpp Module tasks                                             -->
    <!-- ================================================================== -->
    <target name="prepare-xmpp" depends="prepare-base">
        <antcall target="prepare-module">
            <param name="module.name" value="xmpp"/>
        </antcall>
    </target>
    
    <target name="compile-xmpp" depends="prepare-xmpp">
        <path id="xmpp.classpath">
            <pathelement location="${build.dir}/xmpp/classes"/>
        </path>
        <path id="xmpp.classpath.depends">
        </path>
        <antcall target="compile-module">
            <param name="module.name" value="xmpp"/>
            <reference refid="xmpp.classpath.depends" torefid="module.classpath"/>
        </antcall>
    </target>
    
    <target name="bind-xmpp" depends="compile-xmpp">
        <antcall target="bind-module">
            <param name="module.name" value="xmpp"/>
        </antcall>
    </target>
    
    <target name="jar-xmpp" depends="bind-xmpp">
        <antcall target="jar-module">
            <param name="module.name" value="xmpp"/>
        </antcall>
    </target>

    <target name="clean-xmpp">
        <antcall target="clean-module">
            <param name="module.name" value="xmpp"/>
        </antcall>
    </target>

    <target name="test-xmpp" depends="bind-xmpp">
        <antcall target="test-module">
            <param name="module.name" value="xmpp"/>
            <reference refid="xmpp.classpath.depends" torefid="module.classpath"/>
        </antcall>
    </target>
    
    <target name="clean-test-xmpp">
        <antcall target="clean-module">
            <param name="module.name" value="xmpp"/>
        </antcall>
    </target>

    <!-- ================================================================== -->
    <!-- jabber-compat Module tasks                                         -->
    <!-- ================================================================== -->
    <target name="prepare-jabber-compat" depends="prepare-base">
        <antcall target="prepare-module">
            <param name="module.name" value="jabber-compat"/>
        </antcall>
    </target>
    
    <target name="compile-jabber-compat" depends="prepare-jabber-compat">
        <path id="jabber-compat.classpath">
            <pathelement location="${build.dir}/jabber-compat/classes"/>
        </path>
        <path id="jabber-compat.classpath.depends">
            <path refid="xmpp.classpath"/>
            <path refid="core.classpath"/>
            <path location="${build.dir}/xmpp/tests/classes"/>
        </path>    
        <antcall target="compile-module">
            <param name="module.name" value="jabber-compat"/>
            <reference refid="jabber-compat.classpath.depends" torefid="module.classpath"/>
        </antcall>
    </target>
    
    <target name="bind-jabber-compat" depends="compile-jabber-compat">
        <antcall target="bind-module">
            <param name="module.name" value="jabber-compat"/>
        </antcall>
    </target>
    
    <target name="jar-jabber-compat" depends="bind-jabber-compat">
        <antcall target="jar-module">
            <param name="module.name" value="jabber-compat"/>
        </antcall>
    </target>

    <target name="clean-jabber-compat">
        <antcall target="clean-module">
            <param name="module.name" value="jabber-compat"/>
        </antcall>
    </target>

    <target name="test-jabber-compat" depends="bind-jabber-compat">
        <antcall target="test-module">
            <param name="module.name" value="jabber-compat"/>
            <reference refid="jabber-compat.classpath.depends" torefid="module.classpath"/>
        </antcall>
    </target>
    
    <target name="clean-test-jabber-compat">
        <antcall target="clean-module">
            <param name="module.name" value="jabber-compat"/>
        </antcall>
    </target>

    <!-- ================================================================== -->
    <!-- Tasks to perform on all modules at once                            -->
    <!-- ================================================================== -->
    <target name="prepare-all" depends="prepare-xmpp,prepare-jabber-compat"/>
    <target name="compile-all" depends="compile-xmpp,compile-jabber-compat"/>
    <target name="bind-all" depends="bind-xmpp,bind-jabber-compat"/>
    <target name="jar-all" depends="jar-xmpp,jar-jabber-compat"/>
    <target name="test-all" depends="test-xmpp,test-jabber-compat"/>
    <target name="clean-all" depends="clean-xmpp,clean-jabber-compat"/>
    
    <!-- =================================================================== -->
    <!-- Creates the API documentation for all modules                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="prepare-all">
        <mkdir dir="${javadoc.dest}"/>
        <javadoc author="true" bottom="Copyright &amp;copy; ${year} Echomine. All Rights Reserved." destdir="${javadoc.dest}"
            doctitle="${Name} ${version} API" packagenames="com.echomine.*" private="false" sourcepath="${build.src}"
            use="true" version="true" windowtitle="${Name} ${version} API">
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Package Preparation (no archiving yet)                              -->
    <!-- =================================================================== -->
    <target name="prepare-package" depends="jar-all">
        <delete dir="${dist.dir}" verbose="false"/>
        <mkdir dir="${dist.dir}"/>

        <copy todir="${dist.dir}/src">
            <fileset dir="${src.java.dir}"/>
        </copy>
        <copy todir="${dist.dir}/examples">
            <fileset dir="${src.examples.dir}"/>
        </copy>
        <copy todir="${dist.dir}/test">
            <fileset dir="${src.test.dir}"/>
        </copy>
        <copy todir="${dist.dir}/build">
            <fileset dir="${project.home}/build"/>
        </copy>
        <copy todir="${dist.dir}/lib">
            <fileset dir="${src.lib.dir}"/>
            <fileset dir="${work.dir}">
                <include name="${jar.name}"/>
                <include name="${jar.examples.name}"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/license">
            <fileset dir="${src.license.dir}"/>
        </copy>

        <copy todir="${dist.dir}">
            <fileset dir="${project.home}">
                <include name="build*.*"/>
            </fileset>
            <fileset dir="${src.docs.dir}">
                <include name="readme.txt"/>
                <include name="changelog.txt"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with ZIP (with or w/o docs)               -->
    <!-- =================================================================== -->
    <target name="package-zip" depends="prepare-package">
        <delete file="${work.dir}/${dist.zip.name}" verbose="false"/>
        <zip basedir="${dist.dir}" includes="**/**" zipfile="${work.dir}/${dist.zip.name}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with TAR-GZIP (with or w/o docs)          -->
    <!-- =================================================================== -->
    <target name="package-tgz" depends="prepare-package">
        <delete file="${work.dir}/${dist.tar.name}" verbose="false"/>
        <delete file="${work.dir}/${dist.tgz.name}" verbose="false"/>
        <tar basedir="${dist.dir}" includes="**/**" tarfile="${work.dir}/${dist.tar.name}"/>
        <gzip src="${work.dir}/${dist.tar.name}" zipfile="${work.dir}/${dist.tgz.name}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP (with or w/o docs)  -->
    <!-- =================================================================== -->
    <target name="package-all" depends="package-zip, package-tgz">
    </target>
</project>
