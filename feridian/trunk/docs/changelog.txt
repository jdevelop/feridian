Echomine Muse Changelog
============================================================
NOTE: The changelog will only contains changes that are within major version
releases (ie. 0.7, 0.8, etc).  Previous major version changelogs will be with
its respective release archive.

=========================================================================
Version 0.81
=========================================================================
--------------------
Gnutella Module -- OBSOLETE
--------------------
OBSOLETE -- As of this version, Gnutella is officially removed from Muse.
Fixed -- typo for GnutellaConnection.getVendorFeatureHeaders() (originally it was spelled
  getVendorFeartureHeaders()).
Fixed -- NPE error when host restricted callback handler is not set.
Fixed -- AbstractGnutellaProtocol.logHandshakeHeaders() was producing ClassCastException.

--------------------
Jabber Module
--------------------
Added -- JID.hashCode() for storing JID in hashtables.
Added -- Suscription type constants to RosterItem.
Fixed -- (MUS-61) JabberVCardMessage now supports PHOTO TYPE.  This will allow photos
  to be either in external URL form or Base64-encoded binary data form.  The photo
  type will indicate which as well as the mime type.
Fixed -- (MUS-63) XMLRPCMessage now implements setFactory() to set custom serializer factory.
Fixed -- (MUS-65) Thread ID from incoming messages were not being parsed and used.  Instead,
  the auto-generated Thread ID was being used instead. (Reported by Rory)
Fixed -- (MUS-67) PGPXSignedMessage was not registered with the parser (thus the parser was
  unable to parse PGP X Signed message types).
Fixed -- (MUS-68) JabberJDOMMessage.encode() will output the element's text, not just subelements.
Fixed -- (MUS-69) Added new AbstractPGPXMessage and modified PGPEncryptedXMessage and PGPSignedXMessage
  to extend from the new abstract class that supports stripping and attaching of PGP headers to conform
  with the JEP-0027 style of PGP text.
Fixed -- (MUS-70) Some illegal JIDType xml elements are causing ClassCastException errors
  because the elements cannot be parsed properly.
Fixed -- (MUS-73) Fixed NPE errors when parse() parses a call without parameters.  The
  parameters are optional, not required as the parse() method assumed.
Fixed -- (MUS-74) Fixed a bug where the namespaces aren't being outputted properly in
  JabberJDOMMessage.encode() when child element uses an empty namespace (ie. "").
Fixed -- (MUS-75) Fixed a bug where if you were to use setMessageID() after instantiating a message class,
  the new message ID will not be set in the XML DOM (only in the messageID variable).  Thus, the new
  Message ID does not get propagated to the remote server if the message is sent.
Fixed -- (MUS-76) Fixed a bug where ParseException is thrown in encode() if called right after parse().
Fixed -- (MUS-77) Modified the JabberRosterService.requestRosterList() to return a list of RosterItem objects
  when called synchronously.  Previously method signature did not return anything (ie. void).
Fixed -- (MUS-79) Changed imports and codes to eliminate the SSL deprecation warnings.
Modified -- the constructor signature for XMLRPC Response class to accept a SerializerFactory in addition
  to the DOM Element (when incoming message is parsed).  Also, modified both Response and Call's constructors
  to do sanity null checks on the SerializerFactory parameter.
Modified -- (MUS-80) Modified ErrorMessage to conform to JEP-0086, making the error message stanza XMPP compliant.
Modified -- (MUS-81) Changed JabberCode and PresenceCode to interfaces.  Modified a large number of classes
  to implement JabberCode.
Fixed -- some JabberServerService methods were throwing NPEs.
Modified -- All files using jakarta-oro to now use JDK 1.4's java.util.regex classes.
Updated -- Jabber now uses JAXP as the default parser.  Normally, this means Crimson
  will be used because it is the default XML parser packaged with JDK 1.4 (1.5
  is a different story).
Removed -- JabberCrimsonParser as it is no longer needed.

--------------------
Echomine General/Utils/Network
--------------------
New -- Echomine Muse is now officially moved up to have a minimum requirement of JDK 1.4+.
  Now that most platforms (including Mac OSX) support 1.4, I believe it's time to move the API
  up to standard.
Added -- mockobjects-alt's io and net packages for easier unit testing (v0.09).  This
  effectively changes all references from java.net.Socket to alt.java.net.Socket.
  The changes should not be apparent to anyone using the API at a higher level.
  Only those dealing with low level Socket work will need to import alt.java.net.Socket
  instead of java.net.Socket.  Codes and functionality should not change at all
  due to this additional implementation.
Upgraded -- JDOM library to 1.0
Upgraded -- Commons-logging to 1.0.4
Upgraded -- bsh to 2.0b2
Upgraded -- log4j to 1.2.9
Upgraded -- XPP3 to 1.1.3.4.M
Removed -- jsse.jar, crimson-1.1.3.jar, xml-apis.jar due to the minimum
  JDK 1.4+ requirement, which means that JSSE is already part of the JDK.
Removed -- ANT libraries ant.jar, optional.jar.  Also removed ant.bat and ant.sh.
  Muse now requires an ANT distribution that is already installed on your system.
Removed -- jakart-oro.jar. Muse now uses JDK 1.4's own java.util.regex package.
Removed -- All HTTP* classes under util package.  These are no longer needed
  after Gnutella module is removed. Test Cases are removed as well.
Removed -- Unused locking classes in the util package.
Upgraded -- Muse to Apache License 2.0

=========================================================================
Version 0.8a5
=========================================================================
--------------------
Gnutella Module
--------------------
Fixed -- (MUS-49) MsgQueryResponse total number of records should only be 255, not 256.
Fixed -- (MUS-51) AbstractJabberMessage causing NullPointerException when type is null and is being checked for TYPE_ERROR.

--------------------
Jabber Module
--------------------
Added -- JabberXPPParser to use XPP pull parser for the underlying XML stream parsing.  In order
  to use the XPP parser, you must set the system property "com.echomine.jabber.SAXParser" to
  "com.echomine.jabber.parser.JabberXPPParser" and include the xpp library in your classpath.
Modified -- some of the underlying parsing and message construction were using the fully qualified
  names of the XML elements being parsed.  This was causing some problems when working with XPP's
  SAX2 Driver.  To workaround this problem, the parsing now looks only at the local element name,
  not the fully qualified name.
Removed -- (MUS-50) DefaultJabberEvent is removed as it is not being used.
Fixed -- (MUS-52) JabberVCardMessage causing NullPointerException when encoding message and JID is null.
Removed -- JabberMessageReplyEvent and JabberMessageReplyHandler.  Those are no longer needed because
  the message reply handler mechanism has been taken out of JabberMessage.  It seems to be a rather
  useless feature and thus is now removed.
Removed -- JabberMessage.setMessageReplyHandler().  No longer used.

--------------------
Echomine General/Utils/Network
--------------------
Added -- lib/readme-libs.txt file that shows you what each library is used for and what
  version the libraries are.
Added -- Xml Pull Parser 3 Library version 1.1.3.4-RC3.
Fixed -- bulid.xml to include the example and test files.
Modified -- The entire XMLRPC has been refactored for much better support of XMLRPC.  Test cases are also added
  to make sure the serializing and deserializing is working properly.

=========================================================================
Version 0.8a4
=========================================================================

--------------------
Gnutella Module
--------------------
Added -- Extension block support to MsgResRecord. (Eyal Lior)
Added -- Extended Query block support to MsgQuery (either for HUGE or metadata). (Eyal Lior)
Added -- Extension block support to ShareFile to contain additional metadata info. (Eyal Lior)
Added -- inclusion of additional HTTP connection headers to GnutellaConnectionModel
  for use when making connection to another client via V06 protocol.  GnutellaConnectorProtocolV06
  is modified to send these headers out along with the feature headers. (Eyal Lior)
Modified -- interface signature for ShareFileController.getFiles() now accepts
  MsgQuery object and then return a collection of MsgResRecord objects.  GnutellaShareService
  is modified to work with the new logic for getFiles().  So was DefaultShareList. (Eyal Lior)
Modified -- All logging and stat codes that were previously located in aspects
  have now been migrated into the code.  Logging is kept at a minimal impact
  in the code so the performance degradation should not be noticeable. (Eyal Lior)
Fixed -- a bug where the acceptor did not store the remote supported features. (Eyal Lior)

--------------------
Jabber Module
--------------------
Added -- support for JEP-0030 Service Discovery protocol.  This is supposedly going to replace
  the older Agent and Browsing protocols. Note that not all the discovered features and namespaces
  registered with the Jabber Registrar is supported by Muse yet.
Added -- support for JEP-0004 Data Gathering And Reporting jabber:x:data namespace.  This is an
  X Message, and thus can be retrieved from any message class that supports this namespace.
  You need to check if this namespace exists and use this if you are interested in offering more
  advanced functionality for your GUI client.
Added -- support for JEP-0109 http://www.jabber.org/protocol/vacation namespace, which deals with
  vacation messages.  This is done through the use of VacationIQMessage.  Added convenience
  methods to JabberUserService to set, remove, and request vacation messsages.
Added -- support for JEP-0055 jabber:iq:search namespace, which deals with searching
  the JUD.  This is done through the use of SearchIQMessage and SearchItem.  Added
  convenience methods JabberServerService.getSearchFields() and JabberServerService.search().
Added -- support for JEP-0049 jabber:iq:private namespace, which deals with storing and
  retrieving private XML data on the server.  This is done through the PrivateXmlIQMessage.
  Added convenience synchronous method JabberClientService.getPrivateData() to retrieve
  the private data from the server.
Added -- support for JEP-0066 jabber:x:oob and jabber:iq:oob through the use of OOBXMessage
  and OOBIQMessage.
Added -- AbstractJabberMessage.setErrorMessage().  You can now set an error message
  to be attached to the main message.  This will automatically set the Type to "error".
Added -- com.echomine.example.JabberConsole.  The code is essentially taken out
  from the original JabberTest so that it can be perceived as an "application"
  by itself.  This class is located in the examples subfolder, not in the source
  folder itself.  Also added com.echomine.example.JabberShellConsole for working
  directly with java objects rather than XML strings through the use of BSH.
Added -- Photo, Background, and Foreground attributes to JabberVCardMessage. Modified
  to remove deprecation warnings when JDOM was upgraded to b9. (Eyal Lior)
Added -- New convenience method JabberClientService to submit OOB request to
  a remote client.
Added -- New JabberContext.getServerNameJID() to retrieve the JID instance of the server name.
  JabberContext.setServerName() now will throw a ParseException if any parsing of the server
  name occurs.
Deprecated -- All classes and methods related to Agent namespace (JEP-0094) .  This is done to
  comply with the recent vote to obsolete the JEP.  The replacement will be JEP-0030 Service
  Discovery Protocol.
Modified -- All references to JIDs in the package as String has now been altered to use the JID
  instance.  This is a proper safety feature that will allow better security over the fact
  that the JID may not be appropriate and may later cause problems.  So now all incoming and
  outgoing JIDs will be checked.
Modified -- Moved all the non-primary messages to com.echomine.jabber.msg package. This
  is due to the increase in the number of messages that are being created to supports
  the JEPs.  To reduce the clutter, most of the message classes are now relocated.
Modified -- JabberSession now delays the instantiation of each individual service
  until its first time use.  This should speed up the startup time when first
  creating a session.  It also conserves some resources here and there
  if certain services are never used.
Modified -- All the high level Services now accepts JabberSession in its constructor
  rather than the JabberContext and JabberConnection as those two objects can be
  retrieved from the session directly.
Modified -- All logging codes that were previously located in aspects
  have now been migrated into the code.  Logging is kept at a minimal impact
  in the code so the performance degradation should not be noticeable.
Modified -- JabberPresenceMessage methods to conform to XMPP protocol specs.  The
  Show State will now never be null, and by default if null if received,
  PresenceCode.SHOW_ONLINE is automatically assumed.  The priority is now an integer
  rather than a string.  By default, the priority is 0.
Fixed -- AbstractJabberMessage.isError() was causing some NullPointerExceptions when
  presence is received from the server.  This is due to the new Presence code that is
  written to comply with the XMPP protocol.  Type can sometimes be null.
Fixed -- JabberChatMessage.setHTMLBody() was parsing and creating a new document
  element, but failed to detach the root element from the document.  Thus, when
  it was being inserted into the chat message, an exception occurs.  setHTMLBody()
  also throws a ParseException if any parsing errors occur (rather than eating
  up and ignoring the exception like before).  You will need to catch the exception
  now if you used setHTMLBody() in your code.

--------------------
Echomine General/Utils/Network
--------------------
Fixed -- XMLRPC DateSerializer where a null pointer exception was being thrown
  due to no instantiation of SimpleDateFormat.
Moved the previous com.echomine.test package files into its own \examples
  subfolder.  The old package files are now under a new package name --
  com.echomine.example.  com.echomine.test is created in its own subfolder
  and will now officially house the real junit tests that tests the classes.
Extensive modification to the build structure.  build.xml is now located in
  the main project directory.  A new build.properties is created so that
  you can easily add or change the configuration settings for your own build.
  You can either modify the build.properites file or create one in your own
  home directory.  The one in your home directory will override the settings
  that come with the project.  A new build-tests.xml is created that cannot
  be directly called but can be used from build.xml to run the junit tests
  to test the packages.  As ANT is now included as part of the distribution,
  simple ant.sh and ant.bat scripts are now included that can be used to
  quickly build, compile, and test the distribution.  The muse package is
  now self-sufficient and can be run without installing other packages like
  ANT, thus making things much much easier to build and recompile.
Added new libraries -- ANT 1.5.4 ant.jar and optional.jar libraries.  You do
  not necessarily need the same version of ANT to work with Muse, but it is
  recommended to avoid any problems.  Also added Jarkata commons-logging 1.0.3
  for logging purposes now that logging is part of the package.  What is good
  about all this is that you can now utilize the XML library and logging
  that comes with JDK 1.4 without using additional libraries, thus reducing
  the size of the distribution required to work with Muse (this is important
  for those who are using Jumpstart or applet codes). Added bsh 2.0b1 for working
  with shell scripting for the new JabberShellConsole example class.
Upgrade libraries -- jakarta-oro to 2.0.7, jdom to b9, junit to 3.8.1,
  log4j to 1.2.8.  The libraries are also now renamed without the version
  number appended to the filename.
Replaced Libraries -- jaxp 1.1 is now replaced with xerces' xml-apis.jar file
  for better support for xerces. You simply need to drop in a new version of
  xercesImpl.jar and you're set to work with xerces (but still you better
  make sure that it works properly with streaming XML).
Removed Libraries -- All AspectJ libraries are now removed because Aspects
  are no longer used.  All the logging code is now incorporated into the source
  code directly.  This may cause very minor performance hits, but may seem to be
  a better idea due to the fact that people seem to be using the logging quite
  often anyways.

=========================================================================
Version 0.8a3
=========================================================================
--------------------
Jabber Module
--------------------
Added new support for JEP-0054 vcard-temp namespace.  Thanks to Matthias Benkard
  for contributing the source code for this invaluable message class.  Muse
  now has full support for vcard and is becoming a more full-featured API.
  (Matthias Benkard)
Added detection for non-conforming jabber servers (normally Java-based
  Jabber servers) where the servers send <stream> stanzas first before
  the client does.  XMPP states that client must send <stream> first
  before server replies with a response.
Added JabberSession.sendMessageLater() method to send messages later
  when you want to send a synchronized message within a
  JabberMessageListener.messageReceived().
Modified JabberPresenceMessage to not write the "type" attribute when the
  type is "available".  This is to conform with XMPP standards.
Modified AuthIQMessage to return the digest password string back as lowercase
  for conformance with XMPP standards.

=========================================================================
Version 0.8a2
=========================================================================
--------------------
Jabber Module
--------------------
Add NullMessage that basically sends a NOOP message (ie. ' ').  This is
  useful for sending keepalive pings. (Liam Hudson)
Added KeepAlive that will create a thread to periodically ping the server with
  a NullMessage to check for stale connections. (Liam Hudson)
Modified JabberChatService methods, JabberPresenceService.setToAvailable()
  to accept additional sync method parameter
  so that it allows callers to specify whether messages can be sent
  synchronously or asynchronously.
Modified JabberConnection and JabberContext to support SSL connections to
  the Jabber server.  The initial support is alpha and will require testing.
  Report if you have any problems working with SSL.  Tested with jabberd
  1.4.2/SSL Server. (Adrian Blakey)

--------------------
Gnutella Module
--------------------
Removed GnutellaConnectionManager.setRestrictedHostCallback.  Moved it to GnutellaContext now.
Added restricted host checking to incoming file upload and download transfer requests.  If
  host is restricted, then the connection is shutdown immediately without notification to
  high level listeners.  Thus, restricted hosts are never seen.
Added null pointer checking before calling HostManagerImpl.addHost() or saving a host
  out to a file.

--------------------
Echomine General/Utils/Network
--------------------
Modified all ConnectionModel, SocketConnector, and other supported classes
  to work with SSL connections.  This code requires that JSSE be installed
  in either the JDK's lib/ext directory or in your classpath.  You may not
  need JSSE to be installed if you are not using the SSL features, but you
  will need the libs to compile.  The code does not allow you to accept
  SSL connections, only connecting to SSL-based servers. This is alpha
  code and will require extensive testing.  (Adrian Blakey)

=========================================================================
Version 0.8a1
=========================================================================

--------------------
Jabber Module
--------------------
Added PGPSignedXMessage for jabber:x:signed message type support.  This X Message
  will normally be used in sending public keys as well as presence key confirmation
  in the presence message.
Added support for Invisible presence type to go online invisibly. Simply set
  the proper presence type.
Modified ExpireXMessage to supports the additional "stored" attribute as presented in
  JEP-0023.
Modified method name JabberMessage.addXMessage() to setXMessage() to better reflect its usage.
Modified JabberUserService.login() to reset the 0k sequence when it reaches
  below 3.  This is simply done by resetting the password to the current password.
Modified JabberConnection.connect() not to timeout after 5 seconds.  Instead,
  it will wait indefinitely for a connection to occur.  Normally, this means
  calling connect will take at most about 60 seconds if it can't connect.
  However, usually it will take much less time to connect or have an error returned.
Modified JabberConnection to subclass from TimeableConnection so that the connection
  is timeable.
Fixed a bug in JIDType where a NullPointerException is occurring while parsing an incoming
  browse result message.

--------------------
Gnutella Module
--------------------
Added constructor for GUID that will give the option of not generating a GUID.
  This is normally used for creating incoming messages (which already has
  its own GUID).
Added a new base abstract file handler class GnutellaFileHandler that saves the remote headers for
  each file request.  This is useful when you want to display the status headers of the file transfer.
  All Gnutella file handlers now directly subclass GnutellaFileHandler so that you can retrieve the response
  headers.  These headers are different for a upload and a download.  Uploads will contain headers for their
  requests. Downloads will contain response headers for your request.  You can typecast all AbstractFileHandler
  classes into GnutellaFileHandler within Gnutella module.
Added new abstract class AbstractGnutellaConnection that contains factored-out
  common functionality for all GnutellaConnection implementations.  Mainly,
  this affects GnutellaConnectorConnection and GnutellaAcceptorConnection.
Added ability for AbstractGnutellaConnection to be timeable.  Basically,
  AbstractGnutellaConnection subclasses TimeableConnection.
Added interface GnutellaStatistics is now an interface.  Old GnutellaStatistics
  codes are now moved into com.echomine.gnutella.impl.GnutellaStatisticsImpl.
Added GnutellaConnectionStatisticsListener that lets GnutellaConnection fire
  off stats to listeners.
Added GnutellaBusyAcceptorProtocolV04 and GnutellaBusyAcceptorProtocolV06 to send busy
  responses when the server max connections are reached.  Also added
  GnutellaRejectedAcceptorProtocolV04 and GnutellaRejectedAcceptorProtocolV06
  to send a Forbidden (403) status when the host is restricted.  Headers will
  be sent as well if there are any.
Added GnutellaConnectionManager.setRestrictedHostCallback() to replace the removed
  add/removeRestrictedHost(). Restricted Host checking does not restrict any host
  by default.  A callback must be set for you to restrict any host. Connection
  Events are fired for rejected connections as well. Connection Starting event
  will be fired with a CONNECTION_REJECTED status event, and then the connection
  will be immediately closed (closed event fired).
Added a new interface IRestrictedHostCallback to check whether a host is restricted.
  This will make the restricted host checking pluggable.
Added com.echomine.gnutella.impl.SimpleRestricteHostCallback class that will do
  simple restricted host checking and allow you to add specific IPs.  You can
  instantiate this class for use.
Added throttling capability to AbstractGnutellaProtocol and its subclasses.
  All connection protocols can now be throttled.
Added the ability to send a push request if a direct download request fails
  to connect to the remote.
Modified the connection type for file transfers to be more intuitive.  Downloads
  will have connection models with connection type INCOMING (downloading files
  into our own drive).  Uploads will have connection models with connection type
  OUTGOING (uploading file out to the remote).  Notice that this is in contrast
  to a incoming/outgoing connection that uses the connection type to indicate
  if the connection is an incoming/outgoing connection.
Modified GnutellaStatistics.getCurrentActiveConnections() method and renamed it
  to GnutellaStatistics.getEstablishedConnectionCount() for more concise meaning.
Modified GnutellaStatisticsListener to use GnutellaConnection instead of GnutellaConnectionStatistics.
Modified GnutellaStatisticsListener interface method signatures.  Any stats
  listener must be recoded to work with the new interface methods.  Specifically,
  connection-specific stats gets its own event method and global stats gets one
  as well (connectionStatsUpdated and globalStatsUpdated).  statHostEstablished
  and statHostClosed have been removed.  It will simply be replaced by listening
  for connection events.  There is no point for the API to fire off another set
  of events that corresponds with connection events anyways.
Modified all hardcoded User-Agent headers to use the one that is specified in GnutellaContext.
Modified AbstractGnutellaProtocol to accept a maximum of 32k for each message.  If any messages goes above
  the 4k limit, the remote client is considered a bad client and will immediately be disconnected.
Modified ConnectionList.size() to getActiveConnections() to better reflect its usage.
Modified ConnectionListener.connectionStarting() to support throwing ConnectionVetoException to reject
  any connections before communication begins. This will allow higher level listeners to have
  control over the acceptance of each connection before it begins.  All source codes
  are modified to work with this new feature. Vetoed connections have their connection status
  type as CONNECTION_VETOED inside the connection closed event.
Modified Incoming and Outgoing max connection checks to be implemented and checked inside connection
  events.  The new behavior will now allow you to have full view of all the incoming and outgoing
  connections.  Max incoming and outgoing connections will be checked AFTER all other listeners
  have had a chance to process the connection starting event.  When max connections have been
  reached, the enforcer will veto the connection.  This effectively closes the connection
  immediately, firing off a connection closed event to listeners that received the connection starting
  events earlier.  You may see connections higher than max connections being processed, however,
  the max connections are actually enforced, just at a later stage.
Modified GnutellaAcceptorConnection and GnutellaConnectorConnection to support handshaking as a prerequisite
  before a connection is fully accepted.  This means that the handshake method will be called between
  the connection starting event and the connection established event.  If protocol handshaking fails,
  connection established event will not be called; connection closed event will be called instead as
  the connection will be shutdown immediately.
Modified all handshaking codes for incoming connections (located in the GnutellaV06RequestHandler
  and GnutellaV04RequestHandler).  They are now moved into the Protocol Handler's handshake()
  method instead.  This code relocation changes the behavior of the incoming connection events
  to work the same way as the outgoing connection handlers.  Now, the real handshaking
  will be done AFTER connection starting is fired.  Once handshaking is successful, the connection
  established event will be fired.  Then, the connection will begin processing messages.  This
  process is the same for both incoming and outgoing connections.
Modified HostManager to cache the hosts sent through the X-Try and X-Try-Ultrapeers headers.
Modified some method signatures with MessageRouterController that accepts a GnutellaMessage
  rather than a GUID instance.
Modified GnutellaTest's default file listener to report filesize changes once
  per second.
Modified message routing behavior for unknown messages.  Unknown messages are
  silently dropped rather than routed now.
Modified behavior for subscribing to incoming message listening.  Now message
  listeners have full unfiltered access to all messages.  Previously, incoming
  messages were filtered so that only appropriate messages are allowed to go
  through.
Modified ClientMessageRouter to not allow subscribing of incoming messages.
Modified GnutellaShareService to not accept a throttler.  In order to add
  a throttler to an upload transfer, you will need to set it in the FileModel
  during the file transfer starting event.  This will give you much higher
  customization such as per-transfer throttling.
Modified message routing to drop messages with excessive TTL of larger than 10
  (TTL + Hops combined).
Relocated GnutellaFactory.getMessageFactory() to GnutellaContext.get/setMessageFactory().
  Now, setting message factory does not require create a new GnutellaFactory class.
Relocated GnutellaFactory.getShareFileController() to GnutellaContext.get/setShareFileController().
  Now, setting file sharing is done inside GnutellaContext for simplicity.
Relocated many implementation classes to a new com.echomine.gnutella.impl package.
  These classes are normally classes that you do not need to deal with directly.
  They are moved into a separate package so that you do not need to see so many
  classes that you want/need to use. This will decrease confusion.  Many
  implementation classes will still be used by you and therefore an interface is
  created for those classes for you to reference to for convenience and contract design.
Removed GnutellaConnectionStatistics.  All connection stats are now directly
  embedded into GnutellaConnection. Most GnutellaConnectionStatistics codes now
  reside within GnutellaConnection.
Removed HostListenerAdapter as there really isn't a need for it.
Removed ConnectionListenerAdapter as there really isn't use for it.
Removed getShareFileControler() and getGetRequestHandler() methods from
  GnutellaShareService as it doesn't seem to be used.
Removed GnutellaConnectorConnection.connect(GnutellaConnectionModel, boolean).
  Only the connect(GnutellaConnectionModel) exists for a synchronous connect to a remote client.
Removed redundant parameters for AbstractGnutellaConnection, AbstractGnutellaProtocol,
  and their respective subclasses. The classes now have more concise constructors.
Removed GnutellaConnectionManager.add/remove/isRestrictedHost().  This is replaced
  with the IRestrictedHostCallback interface.
Removed Gnutella.sendPingMessage().  It should rarely be the case where you have
  to deal directly with Ping messages now.
Removed GnutellaFactory.getGnutellaStatistics().  The stat object is now instantiated
  inside GnutellaConnectionManager itself.
Removed GnutellaFactory and DefaultGnutellaFactory as the codes are migrated over
  to GnutellaContext and GnutellaConnectionManager.
Removed AbstractMessageRouter.
Removed the throttler parameter in GnutellaDownloadService.getFile() and
  getFileThroughFirewall() as it now resides inside the FileModel.
Removed references of Throttler in AbstractFileHandler as it is now relocated into
  FileModel.  However, the class still has convenience methods to retrieve
  the throttler.Fixed GnutellaConnectorProtocolV06 storing local features rather than remote features (which is incorrect) during
  handshaking.
Fixed a problem where GnutellaConnectorProtocolV06 is not checking for the correct features.
Fixed a bug where a thread race condition could occur inside the connection handling routine.  This causes potential
  unclosed sockets leading to increased thread counts that were never cleaned.  It also causes some active connection
  count to be reported improperly.  What may happen is that a connection may have been closed but the active connections
  still thinks that the connection is still active. This affects the gnutella module.
Fixed some file transfer handling issues that should increase the chances of
  successful downloads.

--------------------
Echomine General/Utils/Network
--------------------
Every module will now have a junit package that contains the tests.  These tests are not
  packaged into the final JAR file by default.  The test cases, however, ARE compiled
  into the work/classes folder.  Thus, you can always set the classpath and run it there.
Every module will now have a log package that contains logging classes and aspects.
  These log classes are not compiled and packaged by default.  A recompile
  must be done to create the new log classes (with the new ant tasks).  After
  recompiling, logging will be turned on by default.  You can then edit the
  log4j.properties file to log the data that you are interested in.  You can
  also replace the log4j.properties file with one that you specify by simply
  setting some log4j-specific system properties (refer to log4j documentation).
ANT build file now contains two additional tasks, compile-with-logging and jar-with-logging.
  The default ant task (compile and jar) will not include any logging codes for performance.
  However, if you wish to look at some debugging statements, you can manually compile logging
  into the codes.
Added JUnit 3.7 library for JUnit testing support. JUnit is not required for deployment usage, only
  for testing purposes.
Added AspectJ 1.0.6 runtime library for aspect-oriented programming support.
Added Log4J 1.2.6 for logging support.  Logging is normally nor required for deployment usage, only
  when the source is compiled with "compile-with-logging" task.
Added logging aspects that will log certain information. To enable this, execute
  "ant compile-with-logging" to add in logging into the module.  All logging
  aspects reside in a log subpackage under each respective module.
Added HandshakeableSocketHandler and all SocketConnector and SocketAcceptors to com.echomine.net
  for connections that require handshaking.  Handshakeable connections will have a different
  processing order -- connection starting fired, handshake called, connection established fired,
  handle called, connection closed fired.
Added new RandomGUID that works better than GUID.  The original (and relocated)
  GUID now wraps RandomGUID and adds enhancements to work specifically with Gnutella.
Added TimeableConnection that will register the time that a connection has been
  online.  All Jabber and Gnutella Connections are now timeable.
Added ConnectionThrottler to do connection-based bandwidth throttling.
Added SimpleConnectionThrottler that will do simple bandwidth throttling.
Added connection timer and throttling feature to GnutellaConnection default
  implementations.  The throttler can be retrieved or set in the connection
  model.  The bandwidth (which is the sum of incoming and outgoing combined)
  and time online is also stored in the connection model.
Added FileHandler interface that will be implementated by AbstractFileHandler.
Added FileHandler to FileModel.
Modified SocketHandler.handle() to allow throwing of IOException.  Closing of
  connection is not required to be done inside the SocketHandler.  Rather, the
  socket shouldn't be closed at all in handle(). The caller of the handle()
  method must close the socket manually.
Modified SocketConnector to fire off connection starting event before connecting
  to the remote host. If connection fails, the connection closed event will be
  fired.  This is in contrast to the old behavior where the SocketConnection
  does not fire connection starting until AFTER connection is established (if
  connection fails, then no events are fired).  This should lead to more logical
  behavior as well as better connection status indications.
Modified FileListener method signatures to not have FileHander as part of the
  parameter.  The FileHandler reference is now located inside the FileModel.
  The filesizeChanged() method also does not pass the filesize as the parameter.
Modified FileListener to reference the new FileHandler interface rather than
  AbstractFileHandler.
Modified FileModel to contain the throttler rather than the AbstractFileHandler
  itself.  This will give the user higher control on each individual file
  throttler.
Modified any related classes to not reference the throttler or reference the
  new location for the throttler.
Relocated com.echomine.util.GUID to com.echomine.gnutella.
Relocated com.echomine.util.ParseUtil's readToLF() and readToCRLF() to IOUtil.
Relocated com.echomine.util.ParseUtil's (de)serializeIP() to IPUtil.
Removed DefaultFileHandler, FileListenerAdapter, and ConnectionListenerAdapter
  from com.echomine.net package.
Fixed a tiny bug in IOUtil.readToCRLF() where it was not reading the last
  byte correctly when the maximum length is reached.

--------------------
Napster Module
--------------------
Removed Napster Module.  I have deemed it unnecessary to continue support for Napster module as it's not
  used recently due to the past events regarding Napster.  Any version 0.73a1 or earlier will contain
  the last source codes for the napster files.
