<!-- binding testing collection as mapped object with structure children of
 inner interface type implemented by inner class type, also optional structure
 with name and field -->
<binding>
  <mapping name="customers" class="simple.Customers7">
    <value name="count" get-method="getCustomerCount"
        set-method="setCustomerCount"/>
    <collection add-method="wrappedAddCustomer"
        iter-method="wrappedGetCustomerIterator"
        test-method="wrappedHasCustomer" usage="optional">
      <structure name="customer" type="simple.Customers7$CustomerInterface"
          value-style="attribute" factory="simple.Customers7.createCustomer">
        <structure name="name" get-method="getName" set-method="setName"
            usage="optional">
          <value name="first-name" field="firstName"/>
          <value name="last-name" field="lastName"/>
        </structure>
        <value name="street1" get-method="getStreet1" set-method="setStreet1"
            style="element"/>
        <value name="city" get-method="getCity" set-method="setCity"
            style="element"/>
        <value name="state" get-method="getState" set-method="setState"/>
        <value name="zip" get-method="getZip" set-method="setZip"/>
      </structure>
    </collection>
  </mapping>
</binding>
